// Copyright (c) 2022, KarmaCoin Authors. a@karmaco.in.
// This work is licensed under the KarmaCoin v0.1.0 license published in the LICENSE file of this repo.
//

syntax = "proto3";
package karma_coin.verifier;
import "karma_coin/core_types/types.proto";


// mobile phone numbers verifier api service
service VerifierService {
  // Request to verify a number by providing code sent via sms from verifier
  // note that VerifyNumberResponse was lifted to types as it is used in signup transactions
  rpc VerifyNumber(VerifyNumberRequest) returns (VerifyNumberResponse);

  // Extended api - verifies number via Twilio whatsapp given user code
  rpc VerifyNumberEx(VerifyNumberRequestEx) returns (VerifyNumberResponse);

  // Send verification code to the user's mobile number via whatsapp
  rpc SendVerificationCode(SendVerificationCodeRequest) returns (SendVerificationCodeResponse);
}

message SendVerificationCodeRequest {
  string mobile_number = 1;
}

message SendVerificationCodeResponse {
  string session_id = 1;
}

// Verier Info is used to return the network the id and dial-up info of active verifiers
message VerifierInfo {
  string name = 1;
  core_types.AccountId account_id = 2;
  string verifier_endpoint_ip4 = 3; // ip:port
  string verifier_endpoint_ip6 = 4; // ip:port
  string api_endpoint_ip4 = 5; // ip:port
  string api_endpoint_ip6 = 6; // ip:port
  core_types.Signature signature = 7;
}

message VerifyNumberRequest {
  uint64 timestamp = 1;
  core_types.AccountId account_id = 2;
  core_types.MobileNumber mobile_number = 3;
  string requested_user_name = 4;
  core_types.Signature signature = 5;
}

message VerifyNumberResponse {
  core_types.UserVerificationData user_verification_data = 1;
}

message VerifyNumberRequestDataEx {
  uint64 timestamp = 1;
  core_types.AccountId account_id = 2;
  core_types.MobileNumber mobile_number = 3;
  string requested_user_name = 4;
  // optional token to bypass verification
  bytes bypass_token = 5;
  // Twilio whatsapp verification code
  string verification_code = 6;
  // Twilio verification sid (obtained when verify was called from client in response)
  string verification_sid = 7;
}

message VerifyNumberRequestEx {
  // serialized VerifyNumberRequestDataEx
  bytes data = 1;

  // User signature of binary data field 1
  // Public key is account_id in the data
  bytes signature = 2;
}


/// Data object stored in db to track invite sms messages
message SmsInviteMetadata {
  // invited person mobile phone number
  core_types.MobileNumber mobile_number = 1;
  // the time of the last invite sms message sent
  uint64 last_message_sent_time_stamp = 2;
  // total number of invite sms messages sent
  uint32 messages_sent = 3;
  // inviter mobile phone number (from appreciation tx)
  core_types.AccountId inviter_account_id = 4;
  // the hash of the payment tx that triggers this invite
  bytes invite_tx_hash = 5;
}
