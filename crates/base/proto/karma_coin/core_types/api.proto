// Copyright (c) 2022, KarmaCoin Authors. a@karmaco.in.
// This work is licensed under the KarmaCoin v0.1.0 license published in the LICENSE file of this repo.
//

syntax = "proto3";
package karma_coin.api;

import "karma_coin/core_types/types.proto";

// Unified public API provided by blockchain nodes and verifiers
service ApiService {

  // make another user a community admin. Can only be executed by an existing community admin
  // in Karmachain 2.0 this will need to come from sudo
  rpc SetCommunityAdmin(SetCommunityAdminRequest) returns (SetCommunityAdminResponse) {
  }

  // get current karma rewards period leaderboard
  rpc GetLeaderBoard(GetLeaderBoardRequest) returns (GetLeaderBoardResponse) {
  }

  // return all accounts on chain - doesn't support pagination yet but should
  rpc GetAllUsers(GetAllUsersRequest) returns (GetAllUsersResponse) {
  }

  // get contacts for easy appreciation from app of any existing user. should support pagination and prefix filtering
  rpc GetContacts(GetContactsRequest) returns (GetContactsResponse) {
  }

  // Return transactions for provided one or more tx hash
  rpc GetTransactionsFromHashes(GetTransactionsFromHashesRequest) returns (GetTransactionsFromHashesResponse) {
  }

  // check if a username is available
  rpc GetUserInfoByUserName(GetUserInfoByUserNameRequest) returns (GetUserInfoByUserNameResponse);

  // Returns on-chain user info by phone number if user exists
  rpc GetUserInfoByNumber(GetUserInfoByNumberRequest) returns (GetUserInfoByNumberResponse);

  // Returns on-chain user info by account id if user exists
  rpc GetUserInfoByAccount(GetUserInfoByAccountRequest) returns (GetUserInfoByAccountResponse);

  // Returns the current blockchain state
  rpc GetBlockchainData(GetBlockchainDataRequest) returns (GetBlockchainDataResponse);

  // Returns the current blockchain state
  rpc GetGenesisData(GetGenesisDataRequest) returns (GetGenesisDataResponse);

  // Submit a signed transaction to the blockchain
  rpc SubmitTransaction(SubmitTransactionRequest) returns (SubmitTransactionResponse);

  // Get all transactions between two account, included transactions in the pool and not yet on-chain
  // Results include txs current status and all events omitted for each transaction
  rpc GetTransactions(GetTransactionsRequest) returns (GetTransactionsResponse);

  // Get transaction data by its digest hash. Transaction may be in pool or on-chain
  // Returns all events associated with the transaction
  rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse);

  // Get blockchain events for a range of heights
  rpc GetBlockchainEvents(GetBlockchainEventsRequest) returns (GetBlockchainEventsResponse) {
  }

  // Get blockchain events for a range of heights
  rpc GetBlocks(GetBlocksRequest) returns (GetBlocksResponse) {
  }
}

message SetCommunityAdminRequest {
  core_types.AccountId from_account_id = 1;
  core_types.AccountId target_account_id = 2;
  uint32 community_id = 3;
  bool admin = 4;
  // signature of all of the above
  bytes signature = 5;
}

message SetCommunityAdminResponse {
}

message GetLeaderBoardRequest {

}

message GetContactsRequest {
  string prefix = 1; // optional prefix over user names for auto-complete purposes
  uint32 community_id = 2; // optional filter by a community
}

message GetContactsResponse {
  repeated core_types.Contact contacts = 1;
}


message GetLeaderBoardResponse {
  repeated core_types.LeaderboardEntry leaderboard_entries = 1;
}

message GetTransactionsFromHashesRequest {
  repeated bytes tx_hashes = 1;
}

message GetTransactionsFromHashesResponse {
  repeated core_types.SignedTransactionWithStatus transactions = 1;
  core_types.TransactionEvents tx_events = 2;
}

message GetAllUsersRequest {
  uint32 community_id = 1;
}

message GetAllUsersResponse {
  repeated core_types.User users = 1;
}

message GetExchangeRateRequest {
}

message GetExchangeRateResponse {
  // Estimated 1 KC value in USD
  double exchange_rate = 1;
}

// Get user by user name
message GetUserInfoByUserNameRequest {
  string user_name = 1;
}

message GetUserInfoByUserNameResponse {
  core_types.User user = 1;
}

message SubmitTransactionRequest {
     core_types.SignedTransaction transaction = 1;
}

enum SubmitTransactionResult {
  SUBMIT_TRANSACTION_RESULT_REJECTED = 0;
  SUBMIT_TRANSACTION_RESULT_SUBMITTED = 1;
}

message SubmitTransactionResponse {
  SubmitTransactionResult submit_transaction_result = 1;
}

message GetUserInfoByNumberRequest {
  core_types.MobileNumber mobile_number = 1;
}

message GetUserInfoByNumberResponse {
  core_types.User user = 1;
}

message GetUserInfoByAccountRequest {
  core_types.AccountId account_id = 1;
}

message GetUserInfoByAccountResponse {
  core_types.User user = 1;
}

message GetGenesisDataRequest {
}

message GetGenesisDataResponse {
  core_types.GenesisData genesis_data = 1;
}

message GetBlockchainDataRequest {
}

// Current blockchain data
message GetBlockchainDataResponse {
  core_types.BlockchainStats stats = 1;
}

message GetTransactionsRequest {
  core_types.AccountId account_id = 1;
}

message GetTransactionsResponse {
  repeated core_types.SignedTransactionWithStatus transactions = 1;
  core_types.TransactionEvents tx_events = 2;
}

message GetTransactionRequest {
  bytes tx_hash = 1;
}

message GetTransactionResponse {
  core_types.SignedTransactionWithStatus transaction = 1;
  core_types.TransactionEvents tx_events = 2;
}

message GetBlockchainEventsRequest {
  uint64 from_block_height = 1;
  uint64 to_block_height = 2;
}

message GetBlockchainEventsResponse {
  repeated core_types.BlockEvent blocks_events = 1;
}

message GetBlocksRequest {
  uint64 from_block_height = 1;
  uint64 to_block_height = 2;
}

message GetBlocksResponse {
  repeated core_types.Block blocks = 1;
}

