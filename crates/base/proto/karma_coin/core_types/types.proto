// Copyright (c) 2022, KarmaCoin Authors. a@karmaco.in.
// This work is licensed under the KarmaCoin v0.1.0 license published in the LICENSE file of this repo.
//

syntax = "proto3";
package karma_coin.core_types;

// Basic KarmaCoin data types

// Derived from a public key
message AccountId {
    bytes data = 1;
}

// Supported signature schemes
enum KeyScheme {
    KEY_SCHEME_ED25519 = 0;
}

message Balance {
    uint64 free = 1;
    uint64 reserved = 2;
    uint64 misc_frozen = 3;
    uint64 fee_frozen = 4;
}

// An public encryption key
message PublicKey {
    bytes key = 1;
}

message PrivateKey {
    bytes key = 1;
}

message PreKey {
    PublicKey pub_key = 1;
    uint32 id = 2;
    KeyScheme scheme = 3;
}

message KeyPair {
    PrivateKey private_key = 1;
    PublicKey public_key = 2;
    KeyScheme scheme = 3;
}

message Signature {
    KeyScheme scheme = 1;
    bytes signature = 2;
}

message MobileNumber {
    // always up to 12 digits which including country code
    string number = 1;
}

// user on-chain data
message User {
    AccountId account_id = 1; // account id derived from a public key
    uint64 nonce = 2;
    string user_name = 3; // unique across the system
    MobileNumber mobile_number = 4; // verified current number
    uint64 balance = 5;
    repeated TraitScore trait_scores = 6;
    repeated PreKey pre_keys = 7; // one-time enc pre-keys for e2e messaging
}

// Phone verifier is an entity that verifies account mobile phone numbers
message PhoneVerifier {
    AccountId account_id = 1; // verifier account id
    string name = 2;
}

message Block {
    uint64 time = 1;
    AccountId author = 2;
    uint64 height = 3;
    repeated bytes transactions_hashes = 4; // of the signed transactions in this block
    uint64 fees = 5; // total fees paid in this block
    bytes prev_block_digest = 6; // digest of block in consensus at the previous height
    core_types.Signature signature = 7;
    uint64 reward = 8;
    uint64 minted= 9; // total coins minted in this block (rewards + tx fee subsidies)
    bytes digest = 10; // block digest includes hash of all above data

}

message CharTrait {
    uint32 id = 1;
    string name = 2;
}

message TraitScore {
    uint32 trait_id = 1;
    uint32 score = 2;
}

/// transactions

enum TransactionType {
    TRANSACTION_TYPE_PAYMENT_V1 = 0;
    TRANSACTION_TYPE_NEW_USER_V1 = 1;
    TRANSACTION_TYPE_UPDATE_USER_V1 = 2;
}

// Update user info
message UpdateUserTransactionV1 {

    // new requested nickname
    string nickname = 1;

    // Updated verified number
    MobileNumber mobile_number = 2;

    // verifier attestation regarding the number and the account
    VerifyNumberResponse verify_number_response = 3;
}

// Basic payment transaction with optional character appreciation
message PaymentTransactionV1 {
    MobileNumber to = 1; // dest is always a mobile number (of a user or a non-user) no accountId needed.
    uint64 amount = 2; // amount in tokens to transfer
    uint32 char_trait_id = 3; // char trait id set by sender. e.g. smart
}



// Created and signed by a verifier
message VerifyNumberResponse {
    AccountId verifier_account_id = 1;
    uint64 timestamp = 2;
    AccountId account_id = 3;
    MobileNumber mobile_number = 4;
    string requested_user_name = 5;
    Signature signature = 6;
}

// new user transactions submitted by users
message NewUserTransactionV1 {
    // Evidence from a valid verifier about the new user
    VerifyNumberResponse verify_number_response = 1;
}

// serialized transaction data
message TransactionData {
    bytes transaction_data = 1; // binary transaction data (e.g. NewUserTxV1, PaymentV1, etc...)
    TransactionType transaction_type = 2; // transaction type for deserialization
}

enum TransactionStatus {
    TRANSACTION_STATUS_UNKNOWN = 0;
    TRANSACTION_STATUS_NOT_SUBMITTED = 1;
    TRANSACTION_STATUS_SUBMITTED = 2;
    TRANSACTION_STATUS_REJECTED = 3;
    TRANSACTION_STATUS_ON_CHAIN = 4;
}

message SignedTransaction {
    AccountId signer = 1; // account this tx is signed by
    uint64 timestamp = 2; // time transaction was signed
    uint64 nonce = 3; // tx nonce
    uint64 fee = 4; // network fee provided by sender
    TransactionData transaction_Data = 5; // binary transaction data
    uint32 net_id = 6; // network id to avoid confusion with testnets
    Signature signature = 7; // signer signature on all of the above data
}

// a collection of signed transactions
message SignedTransactionsHashes {
    repeated bytes hashes = 1;
}

// Pending transactions are transactions that are not yet on chain
message MemPool {
    repeated SignedTransaction transactions = 1;
}

message SignedTransactionWithStatus {
    SignedTransaction transaction = 1;
    TransactionStatus status = 2; // transaction status
}

enum FeeType {
    FEE_TYPE_MINT = 0; // fee provided by the protocol
    FEE_TYPE_USER = 1; // fee provided by the transaction signer
}

// Transaction added to ledger
message TransactionEvent {
    uint64 timestamp = 1;
    uint64 height = 2; // ledger height of execution
    SignedTransaction transaction = 3;
    bytes transaction_hash = 4;
    ExecutionResult result = 5;
    ExecutionInfo info = 6;
    string error_message = 7;
    FeeType fee_type = 8;
    uint64 signup_reward = 9;
    uint64 referral_reward = 10;
    uint64 fee = 11;
}

// A collection of events for a transaction
message TransactionEvents {
    repeated TransactionEvent events = 1;
}

// Blockchain aggregated data
message BlockchainStats {

    // last block production time
    uint64 last_block_time = 1;

    // current block height
    uint64 tip_height = 2;

    // total number of executed transactions
    uint64 transactions_count = 3;

    // total number of payment transactions
    uint64 payments_transactions_count = 4;

    // total number of verified user accounts
    uint64 users_count = 5;

    // total tx fees collected by block producers
    uint64 fees_amount = 6;

    // total number of kCents minted by the protocol since genesis
    uint64 minted_amount = 7;

    // total number of kCents in circulation by minting. Not including pre-mint
    uint64 circulation = 8;

    // total tx fee subsidies issued by the protocol
    uint64 fee_subs_count = 9;
    uint64 fee_subs_amount = 10;

    uint64 signup_rewards_count = 11;
    uint64 signup_rewards_amount = 12;

    uint64 referral_rewards_count = 13;
    uint64 referral_rewards_amount = 14;

    uint64 validator_rewards_count = 15;
    uint64 validator_rewards_amount = 16;

    // total number of payment transactions
    uint64 update_user_transactions_count = 17;

}

// Block events
message BlockEvent {
    uint64 timestamp = 1;
    uint64 height = 2;
    bytes block_hash = 3;
    repeated TransactionEvent transactions_events = 4;
    uint64 signups_count = 5;
    uint64 payments_count = 6;
    uint64 user_updates_count = 7;
    uint64 fees_amount = 8;
    uint64 signup_rewards_amount = 9;
    uint64 referral_rewards_amount = 10;
    uint64 referral_rewards_count = 11;
    uint64 reward = 12;
}

enum ExecutionResult {
    EXECUTION_RESULT_EXECUTED = 0;
    EXECUTION_RESULT_INVALID = 1; // invalid syntax
}

enum ExecutionInfo {
    EXECUTION_INFO_UNKNOWN = 0;
    EXECUTION_INFO_NICKNAME_UPDATED = 1;
    EXECUTION_INFO_NICKNAME_NOT_AVAILABLE = 2;
    EXECUTION_INFO_NICKNAME_INVALID = 3;
    EXECUTION_INFO_NUMBER_UPDATED = 4;
    EXECUTION_INFO_ACCOUNT_CREATED = 5;
    EXECUTION_INFO_PAYMENT_CONFIRMED = 6;
    EXECUTION_INFO_INVALID_DATA = 7;
    EXECUTION_INFO_ACCOUNT_ALREADY_EXISTS = 8;
    EXECUTION_INFO_TX_FEE_TOO_LOW = 9;
    EXECUTION_INFO_INTERNAL_NODE_ERROR = 10;

}

